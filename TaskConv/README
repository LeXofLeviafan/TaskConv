TaskConvertor converts tasks with group tests from known formats in DL test format.
Version 1.2.1


usage: TaskConv {-h|[-d] <path>} [[-w] <path>] [options]
 -a,--auto                decide on task type automatically if result is
                          ambiguous
 -d,--directory <path>    task directory (required)
 -h,--help                print this message
 -i,--infiles-only        process input files only (for tasks without
                          output files)
 -k,--keep                when used with --move, don't remove empty
                          directories recursively from task directory
                          after processing files
 -l,--level <int>         depth level (default is 0)
 -m,--move                move files instead of copying
 -n,--name <taskname>     task name (predefined instead of detecting)
 -o,--output <filename>   output filename (result); default is "marks.txt"
 -q,--quiet               suppress all messages
 -t,--type <prefix>       required prefix of the task type (IOI, CEOI etc)
 -v,--verbose             verbose output
 -w,--workdir <path>      output directory (default is task directory)


Options with arguments can be written in following ways:
 -d TaskDir
 -dTaskDir
 --directory=TaskDir
 --directory TaskDir
Also you can write short options together:
 TaskConv -mvco test.txt --directory taskpath

TaskType is a required prefix for task type names. That is, "-t IOI" will limit program's choice
to the type names beginning with "IOI": "IOI", "IOI11", "IOI10a", "IOI 2013", etc.

You may also use loose arguments (without options); such arguments are processed after all others
by following rules:
 - if task directory (-d) wasn't set, argument is considered to describe it
 - otherwise, if output directory (-w) wasn't set, argument is considered to describe it
 - otherwise the argument is illegal and the program will refuse to work

Depth level is number of levels program needs to descend from TaskDir to get to the tasks; that is,
ALL subdirectories on that level are considered tasks of the SAME TYPE. If ANY of them fails
type detection, it fails for the whole group.
Usage example:
	tasks are placed like  'Baltica2011/Day 1/task1'
	program is called like 'TaskConv Baltica2011 -l2'


Files contained in "DB/" directory are known types. Feel free to add your own (make sure to do it
the right way though). Format is following:

1st line = input filename pattern
2nd line = output filename pattern
Both patterns use '/' character as directory separator.

pattern details:
	${varname} - variable
	$[varname] - variable may be omitted (SS or SL only)
the variables are:
	TaskName - the name of the task
	S - testgroup number
	SS - test number in group
	SL - test letter in group (Alphabet[SS])

TaskName is the only variable that has nothing to do with test structure itself.
If the program fails to detect it for some reason, you may set it with "-n" option.

Optional file ".cfg" contains characters for path validations:
	First line contains valid characters for TaskName (default is latin alphabet).
Path validation is case insensitive.


If the task wasn't detected to be of any type whatsoever, the program will refuse to work. You may
want to try verbose output (-v) to find out why this happened.

If the task was detected to be of more than one type, the program sort types by the number of
detected input files (if -i was used) or input/output file pairs (otherwise). After that, if
program is running in automatic mode (-a), it will just choose the type with the maximum number of
detected files; otherwise it will ask user for input (0 to cancel, 1 is default type, etc).
